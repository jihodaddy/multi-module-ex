import jdk.jfr.Enabled

buildscript {
    ext {
        springBootVersion = "2.1.3.RELEASE" // 스프링 버전 확장으로 설정
        spockVersion = "1.2-groovy-2.5"
        groovyVersion = "2.5.3"
        lombokVersion = "1.18.2"
        dockerComposePluginVersion = "0.6.6"
    }
    repositories {
        mavenLocal()
            mavenCentral()
            jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 11
    targetCompatibility = 11
    [compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.option*.encoding = "UTF-8"


    sourceSets {
        test.resources {
            // 테스트시 src/main/resources에 있는 설정 파일 사용
            srcDirs "src/main/resources"
            srcDirs "src/main/resources"
        }
    }

    repositories {
        mavenCentral()
        jcenter()

        //재스퍼리포트
        maven { url "http://jasperreports.sourceforge.net/maven2/"}
        maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts"}
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COODINATES
        }
    }

idea {
    module {
        downloadJavadoc = true
        downloadJavadoc = true

        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

    eclipse {
        classpath {
            containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
            containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11"
        }
    }

    bootRun {
        sourceResources sourceSets.main
        jvmArgs "-XX:TieredStopAtLevel=1", "-Xverify:none"
    }

    ext["groovy.version"] = groovyVersion

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

        testCompile "org.assertj:assertj-core"
        testCompile "org.spockframework:spock-core:${spockVersion}"
        testCompile "org.mockito:mockito-core"
    }
}

project(":common") {
    bootjar {
        enabled = false
    }
    jar {
        enabled = true
    }
    dependencies {
        annotationProcessor "org.springframework.boot:spring-bootconfiguration-processor"
        compile "org.springframework.boot:spring-boot-starter"

        compile "org.apache.commons:commons-lang3"
        compile "org.apache.commons:commons-text:1.14"
        compile "org.apache.commons:commons-commons-compress:1.14"
        compile "commons-codec:common-codec"
        compile "org.apache.commons:commons-digester3:3.2"
        compile "org.apache.io:commons-io:2.5"
        compile "org.apache.tika:tika-core:1.15"
        compile "dom4j:dom4j"
        compile "com.ibm.icu:icu4j:59.1"
    }
}


repositories {
    mavenCentral()
}

//task startFakeSmtpServer(type: JavaExec) {
//    classpath = buildscript.configurations.classpath
//    args = ["--start-server", "-m"] // -m (memory-mode)
//    main = "com.nilhcem.fakesmtp.FakeSMTP"
//}

//apply plugin: "docker-compose"
//
//dockerCompose {
//    useComposeFiles = ["docker/docker-compose.yml"]
//}
//
//apply plugin: com.sample.CodeGenPlugin
//
//codegen {
//    domainProjectName = "sample-domain"
//    webProjectName = "sample-web-admin"
//
//    commonDtoPackageName = "com.sample.domain.dto.common"
//    daoPackageName = "com.sample.domain.dao"
//    dtoPackageName = "com.sample.domain.dto"
//    repositoryPackageName = "com.sample.domain.repository"
//    servicePackageName = "com.sample.domain.service"
//    commonServicePackageName = "com.sample.domain.service"
//    exceptionPackageName = "com.sample.domain.exception"
//    webBasePackageName = "com.sample.web.base"
//    baseValidatorPackageName = "com.sample.domain.validator"
//    baseControllerPackageName = "com.sample.web.base.controller.html"
//    controllerPackageName = "com.sample.web.admin.controller.html"
//}
//
//task wrapper(type: Wrapper) {
//    gradleVersion = "4.10.2"
//
////project(":batch") {
////    bootRun {
////        if (project.hasProperty("args")) {
////            args project.args.split("\\s+")
////        }
////    }
////    dependencies {
////        compile project("domain")
////
////        compile "org.springframework.boot:spring-boot-starter-batch"
////
////        testCompile "org.springframework.boot:spring-boot-starter-test"
////        testCompile "org.springframework.boot:spring-batch-test"
////        testCompile "org.springframework.boot:spock-spring:${spockVersion}"
////    }
//    }
//
//}




